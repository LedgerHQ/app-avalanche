name: "test/build"
on:
  - push

jobs:
  configure:
    runs-on: ubuntu-latest
    outputs:
      uid_gid: ${{ steps.get-user.outputs.uid_gid }}
    steps:
      - id: get-user
        run: echo "uid_gid=$(id -u):$(id -g)" >> $GITHUB_OUTPUT

  checks:
    runs-on: ubuntu-latest
    container:
      image: zondax/rust-ci:latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          submodules: true
      - name: Install Miri
        run: |
          rustup toolchain install nightly --component miri
          cargo +nightly miri --version
      - name: Test with Miri
        env:
          MIRIFLAGS: "-Zmiri-symbolic-alignment-check \
            -Zmiri-check-number-validity \
            -Zmiri-permissive-provenance \
            -Zmiri-backtrace=full"
        run: |
          cargo +nightly miri test --features "full","derive-debug"
      - name: show versions
        run: |
          rustup show
      - name: rustfmt
        run: |
          cargo fmt --version
          cargo fmt -- --check
        #run: |
        #cargo clippy --version
        #cargo clippy --all-targets --features "full","derive-debug"
      #- name: clippy

  build:
    runs-on: ubuntu-latest
    container:
      image: zondax/rust-ci:latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          submodules: true
      - name: Cache/restore Cargo dependencies
        uses: actions/cache@v1
        with:
          path: ./app/.cargo
          key: ${{ runner.os }}-${{ hashFiles('./rust/Cargo.lock') }}
      - name: run rust tests
        run: make rust_test

  build_ledger:
    needs: configure
    runs-on: ubuntu-latest
    container:
      image: zondax/builder-bolos:latest
      options: --user ${{ needs.configure.outputs.uid_gid }}
    env:
      BOLOS_ENV: /opt/bolos
      HOME: /home/zondax_circle
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - run: cd deps; sh get_sdk.sh

      - name: Cache/restore Cargo dependencies
        uses: actions/cache@v1
        with:
          path: ./app/.cargo
          key: ${{ runner.os }}-${{ hashFiles('./rust/Cargo.lock') }}

      - name: Build Nano S app
        shell: bash -l {0}
        env:
          BOLOS_SDK: ${{ github.workspace }}/deps/nanos-secure-sdk
        run: |
          source $HOME/.cargo/env
          make
      - name: Build Nano X app
        shell: bash -l {0}
        env:
          BOLOS_SDK: ${{ github.workspace }}/deps/nanox-secure-sdk
        run: |
          source $HOME/.cargo/env
          make clean
          make
      - name: Build Nano S+ app
        shell: bash -l {0}
        env:
          BOLOS_SDK: ${{ github.workspace }}/deps/nanosplus-secure-sdk
        run: |
          source $HOME/.cargo/env
          make clean
          make
      - name: Build Stax app
        shell: bash -l {0}
        env:
          BOLOS_SDK: ${{ github.workspace }}/deps/stax-secure-sdk
        run: |
          source $HOME/.cargo/env
          make clean
          make
      - name: Upload elfs
        uses: actions/upload-artifact@v3
        with:
          name: app-elfs
          path: build/output/*.elf
          if-no-files-found: error

      - name: Upload installers
        uses: actions/upload-artifact@v3
        with:
          name: app-installers
          path: build/pkg/*.sh
          if-no-files-found: error

  tests_zemu_setup:
    if: ${{! contains(toJSON(github.event.commits.*.message), '[skip-zemu]')}}
    runs-on: ubuntu-latest
    outputs:
      test-files: ${{ steps.get-tests.outputs.files }}
      ids: ${{ steps.get-tests.outputs.ids }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Install node
        uses: actions/setup-node@v3

      - name: Install yarn
        run: npm install -g yarn

      - name: Build/Install build js deps
        run: |
          export PATH=~/.cargo/bin:$PATH
          make zemu_install

      - name: Get test files
        id: get-tests
        run: |
          cd zemu
          FILES=`yarn test --listTests --json | head -n 3 | tail -n 1`
          echo "files=$FILES" >> "$GITHUB_OUTPUT"

          IDS=`echo $FILES | jq -cM 'to_entries | map(.key)'`
          echo "ids=$IDS" >> "$GITHUB_OUTPUT"

  test_zemu:
    needs: [build_ledger, tests_zemu_setup]
    if: ${{! contains(toJSON(github.event.commits.*.message), '[skip-zemu]')}}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        test-file: ${{ fromJson(needs.tests_zemu_setup.outputs['test-files']) }}
        test-id: ${{ fromJson(needs.tests_zemu_setup.outputs['ids']) }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          submodules: true

      - name: Download app elfs
        uses: actions/download-artifact@v3
        with:
          name: app-elfs
          path: build/output

      - run: sudo apt-get update -y && sudo apt-get install -y libusb-1.0.0 libudev-dev
      - name: Install node
        uses: actions/setup-node@v3
      - name: Install yarn
        run: npm install -g yarn

      - name: Build/Install build js deps
        run: |
          export PATH=~/.cargo/bin:$PATH
          make zemu_install
      - name: Run zemu tests
        run: |
          export PATH=~/.cargo/bin:$PATH
          cd zemu
          yarn jest ${{ matrix.test-file }}

      - name: Tar Zemu snapshots
        if: always()
        run: tar -cvf snapshots_tmp.tar ./zemu/snapshots-tmp
      - name: Upload tmp snapshots
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: snapshots-tmp_${{ matrix.test_id }}
          path: snapshots_tmp.tar
          #we don't need these snapshots for very long
          retention-days: 3
